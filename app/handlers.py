from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from collections import defaultdict
import asyncio
from datetime import datetime
import config
import os
import app.keyboards as kb
import app.database.requests as rq

router = Router()

user_messages = defaultdict(list)

class MakeOrder(StatesGroup):
    item_id_name = State()
    date = State()
    shift = State()
    interval = State()

class ChangeStates(StatesGroup):
    item_id = State()
    count = State()

class AdminStates(StatesGroup):
    waiting_for_admin_id = State()

# user com

async def delete_previous_messages(user_id: int, chat_id: int, bot):
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        del user_messages[user_id]

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ü–µ–π —É —è–∫–æ–º—É –Ω–∞–≤—á–∞—î—Ç–µ—Å—å –≤–∏ —á–∏ –≤–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ üëáüèª', reply_markup=await kb.lyceums())

@router.callback_query(F.data.startswith('lyceum_'))
async def lyceum_ans(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await rq.set_user(callback.from_user.id, callback.data.split("_")[1])
    await callback.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Å–≤—ñ–π –ª—ñ—Ü–µ–π!')
    
    await delete_previous_messages(user_id, chat_id, callback.bot)
    
    await callback.message.answer(f'<b>–í–∏ –æ–±—Ä–∞–ª–∏ - –í–∞—Ä–∞—Å—å–∫–∏–π –ª—ñ—Ü–µ–π ‚Ññ{callback.data.split("_")[1]}!</b> üè´', parse_mode='HTML')
    await asyncio.sleep(0.5)
    await callback.message.answer('<i>–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –π –ø–æ—Å–º–∞–∫—É–≤–∞—Ç–∏ —Å–º–∞—á–Ω–æ—é –≤–∏–ø—ñ—á–∫–æ—é —Ç–∞ —Å–º–∞—á–Ω–∏–º–∏ –Ω–∞–ø–æ—è–º–∏! ü•∞</i>', parse_mode='HTML')
    await asyncio.sleep(0.5)
    await callback.message.answer('''<b>–Ø–∫–∏–º —á–∏–Ω–æ–º –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É?</b>\n
1. –í–∏ –æ–±–∏—Ä–∞—î—Ç–µ –Ω–∞ —è–∫—ñ–π –ø–µ—Ä–µ—Ä–≤—ñ —Ç–∞ –≤ —è–∫–∏–π –¥–µ–Ω—å –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –∑ –±—É—Ñ–µ—Ç—É.\n 
2. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –±–æ—Ç –Ω–∞–¥–∞—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä, —è–∫–∏–π –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—á–∏–Ω—ñ.\n
3. –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —Å–≤—ñ–π –ø—Ä–æ–¥—É–∫—Ç.''', reply_markup=kb.main, parse_mode='HTML')
    
@router.message(F.text == '–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ª—ñ—Ü–µ–π')
async def ch_lyceum(message: Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ü–µ–π –Ω–∞ –∫–æ—Ç—Ä–∏–π –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏!', reply_markup=await kb.lyceums())

@router.message(F.text == '–ó–≤`—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é')
async def cm_admin(message: Message):
    await message.answer('–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º, —è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∞–±–æ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: @nzor0')
    
@router.message(F.text == '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def mk_order(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    await rq.change_actual_by_user_id(user_id)
    await delete_previous_messages(user_id, chat_id, message.bot)
    
    await message.answer('–í–∞—à–∞ üõí –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è! –®–≤–∏–¥—à–µ –Ω–∞–ø–æ–≤–Ω–∏ —ó—ó!')
    msg = await message.answer('<b>–©–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø–µ—Ä—à–∏–º?</b>', reply_markup=await kb.categories(), parse_mode='HTML')
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data == 'add_to_cart_category')
async def add_to_cart_category(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await callback.answer()
    await delete_previous_messages(user_id, chat_id, callback.bot)
    
    msg = await callback.message.answer(
        '<b>–©–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏?</b>', 
        reply_markup=await kb.categories(), 
        parse_mode='HTML'
    )
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(msg.message_id)
    
@router.callback_query(F.data == 'to_main')
async def to_main(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await asyncio.sleep(1)
    await delete_previous_messages(user_id, chat_id, callback.bot)
    
    await callback.answer('–í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
    await callback.message.answer('<b>–í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.</b>', reply_markup=kb.main, parse_mode='HTML')

@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await asyncio.sleep(1)
    await delete_previous_messages(user_id, chat_id, callback.bot)

    category_data = await rq.get_category_name(callback.data.split("_")[1])
    items = await rq.get_category_item(category_data.id, user_id)
    await callback.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {(category_data.name).lower()}')

    user_messages[user_id] = []
    for item in items:
        await asyncio.sleep(0.05)
        msg = await callback.message.answer(
            f'<b>{item.name}</b> - ({item.price} –≥—Ä–Ω.)',
            parse_mode='HTML',
            reply_markup=await kb.more_info(item.id)
        )
        user_messages[user_id].append(msg.message_id)

    await asyncio.sleep(0.3)
    msg = await callback.message.answer(
        f'–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {(category_data.name).lower()}.\n'
        '–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <i>–±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó</i> –Ω–∞ –æ–±—Ä–∞–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—ñ!',
        parse_mode='HTML'
    )
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data.startswith('more_info_'))
async def item(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await asyncio.sleep(1)
    await delete_previous_messages(user_id, chat_id, callback.bot)

    item_data = await rq.get_item(callback.data.split("_")[2])
    await callback.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {(item_data.name).lower()}')

    file_path = os.path.join("photo", f"{item_data.photo}.jpg")
    photo_msg = await callback.message.answer_photo(
        photo=FSInputFile(path=file_path, filename=item_data.photo),
        caption=(
            f'–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {(item_data.name).lower()}\n'
            f'–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É: {(item_data.description).lower()}\n' 
            f'–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: {item_data.price} ‚Ç¥\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ <b>—Å—å–æ–≥–æ–¥–Ω—ñ</b>: {item_data.count} —à—Ç.\n\n'
            f'<i>P.S: –Ø–∫—â–æ –∑–∞–º–æ–≤–ª—è—î—Ç–µ –Ω–∞ –ø–æ—Ç—ñ–º, –∫—ñ–ª—å–∫—ñ—Å—Ç—å - –Ω–µ –≥—Ä–∞—î —Ä–æ–ª—ñ</i>üòâ'
        ),
        parse_mode='HTML',
        reply_markup=await kb.item_data(item_data.id)
    )
    
    user_messages[user_id] = [photo_msg.message_id]

@router.callback_query(F.data.startswith('add_item_'))
async def add_item(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    item_data = await rq.get_item(callback.data.split("_")[2])
    await callback.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {(item_data.name).lower()}')
    
    await delete_previous_messages(user_id, chat_id, callback.bot)
    msg = await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', reply_markup=await kb.count(item_data.id))
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data.startswith('add_to_cart_item_'))
async def add_to_cart_item(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    item_data = await rq.get_item(callback.data.split("_")[4])
    await rq.add_to_cart(callback.from_user.id, item_data.id, callback.data.split("_")[5])
    await callback.answer(f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä: {item_data.name}\n —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ: {callback.data.split("_")[5]} —à—Ç.')
    
    await delete_previous_messages(user_id, chat_id, callback.bot)
    
    order = await rq.get_order(user_id)
    info = order.catalog.split('_')
    message = ''
    
    for i in range(0, len(info), 2):
        item_name = info[i]
        item_count = info[i + 1]
        message += f'{item_name}: {item_count} —à—Ç.\n'
    
    msg = await callback.message.answer(
        f"<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n{message}\n–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤, –∞–±–æ –∂ –æ–ø–ª–∞—Ç–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É!",
        reply_markup=await kb.req_shop(user_id),
        parse_mode='HTML'
    )
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data.startswith('cart_buy'))
async def buy_cart_item(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    item_data = await rq.get_item(callback.data.split("_")[2])
    await callback.answer()
    await state.update_data(item_id_name=item_data.id)
    
    await delete_previous_messages(user_id, chat_id, callback.bot)
    msg = await callback.message.answer(
        '<i>–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –∫–æ–ª–∏ –≤–∏ –º–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</i>', 
        reply_markup=await kb.generate_date_buttons(),
        parse_mode='HTML'
    )
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data.startswith('date_'))
async def process_date_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    date_str = callback.data.split('_')[1]
    try:
        valid_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.now().date()
        
        if valid_date < today:
            await callback.answer('‚ùå –ù–µ –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –º–∏–Ω—É–ª—É –¥–∞—Ç—É!', show_alert=True)
            return
        
        formatted_date = valid_date.strftime("%d.%m.%Y")
        await callback.message.edit_text(
            f'üìÖ –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: <b>{formatted_date}</b>\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω—É:',
            parse_mode='HTML'
        )
        
        await state.update_data(date=formatted_date)
        await state.set_state(MakeOrder.shift)
        
        await delete_previous_messages(user_id, chat_id, callback.bot)
        msg = await callback.message.answer(
            'üïí –û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –∑–º—ñ–Ω—É:',
            reply_markup=kb.shifts
        )
        
        if user_id not in user_messages:
            user_messages[user_id] = []
        user_messages[user_id].append(msg.message_id)

    except Exception:
        await callback.answer('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞—Ç–∏', show_alert=True)

@router.callback_query(F.data.startswith('shifts_'))
async def give_shift(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await callback.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –∑–º—ñ–Ω—É!')
    await state.update_data(shift=callback.data.split("_")[1])
    
    await delete_previous_messages(user_id, chat_id, callback.bot)
    msg = await callback.message.answer(
        '–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ—Ä–≤—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!', 
        parse_mode='HTML', 
        reply_markup=await kb.intervals(callback.data.split("_")[1])
    )
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data.startswith('interval_'))
async def give_break(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await callback.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –ø–µ—Ä–µ—Ä–≤—É!')
    await state.update_data(interval=callback.data.split("_")[2])
    data = await state.get_data()
    await rq.add_order_data(callback.from_user.id, f'{data["date"]}_{data["shift"]}_{data["interval"]}')
    
    order = await rq.get_order(callback.from_user.id)
    info = order.catalog.split('_')

    date_str = data['date']
    valid_date = datetime.strptime(date_str, "%d.%m.%Y").date()
    today = datetime.now().date()

    message = ''
    out_of_stock_items = []

    if today == valid_date:
        for i in range(0, len(info) - 1, 2):
            item_name = info[i]
            item_count = int(info[i + 1])
            item_info = await rq.get_item_by_name(item_name, order.lyceum)
            
            if item_info.count < item_count:
                out_of_stock_items.append(f'{item_name}: {item_count} —à—Ç.')
            else:
                message += f'{item_name}: {item_count} —à—Ç.\n'

        if out_of_stock_items:
            out_of_stock_message = '\n'.join(out_of_stock_items)
            await delete_previous_messages(user_id, chat_id, callback.bot)
            msg = await callback.message.answer(
                f'‚ùå <b>–ù–∞ –∂–∞–ª—å, –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ:</b>\n{out_of_stock_message}\n'
                '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç. –ü—Ä–∏–Ω–æ—Å–∏–º–æ –≤–∏–±–∞—á–µ–Ω–Ω—è!',
                parse_mode='HTML', reply_markup=kb.main
            )
            user_messages[user_id].append(msg.message_id)
            await rq.change_actual(order.id)
            return

    else:
        for i in range(0, len(info), 2):
            item_name = info[i]
            item_count = info[i + 1]
            message += f'{item_name}: {item_count} —à—Ç.\n'

    await delete_previous_messages(user_id, chat_id, callback.bot)
    msg = await callback.message.answer(
        f'''<b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ!‚úÖ</b>\n{message}–ó–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>{data['date']}, {data['shift']} –∑–º—ñ–Ω–∞, {data['interval']} –ø–µ—Ä–µ—Ä–≤–∞</b>\n–î–æ —Å–ø–ª–∞—Ç–∏: <b>{order.price} –≥—Ä–Ω.</b>\n–í–∞—Ä–∞—Å—å–∫–∏–π –ª—ñ—Ü–µ–π ‚Ññ{order.lyceum}''',
        parse_mode='HTML',
        reply_markup=await kb.buy(order.id)
    )
    user_messages[user_id].append(msg.message_id)

@router.callback_query(F.data.startswith('delete_cart_'))
async def delete_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await delete_previous_messages(user_id, chat_id, callback.bot)
    await callback.answer('')
    await callback.message.answer('üõí –ö–æ—Ä–∑–∏–Ω—É —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!', reply_markup=kb.main)
    await rq.change_actual(callback.data.split("_")[-1])

@router.callback_query(F.data.startswith('buy_'))
async def agree(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await callback.answer('')
    await delete_previous_messages(user_id, chat_id, callback.bot)
    
    msg1 = await callback.message.answer(
        '''–ù–∞—Ç–∏—Å–∫–∞—é—á–∏ –∫–Ω–æ–ø–∫—É <b>\"–ó–≥–æ–¥–µ–Ω\"</b> –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –î–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç–∏ —Ç–∞ –ü–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É, —Ç–∞ –∑–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è''',
        reply_markup=await kb.agree(callback.data.split("_")[1]),
        parse_mode='HTML'
    )
    msg2 = await callback.message.answer(
        '<i>P.S. "–Ü–Ω—à–µ"</i> ‚¨áÔ∏è', 
        reply_markup=kb.main,
        parse_mode='HTML'
    )
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].extend([msg1.message_id, msg2.message_id])

@router.callback_query(F.data.startswith('agree_'))
async def buy_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    await callback.answer('')
    await delete_previous_messages(user_id, chat_id, callback.bot)
    
    order = await rq.get_order(callback.from_user.id)
    info = order.catalog.split('_')
    prices = []
    
    for i in range(0, len(info) - 1, 2):
        price = await rq.get_price_by_name(info[i])
        amount = int(price * int(info[i + 1])) * 100
        prices.append(LabeledPrice(label=f"{info[i]}: {info[i + 1]} —à—Ç.", amount=amount))

    try:
        await callback.message.answer_invoice(
            title='–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!',
            description='–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!',
            payload=f"order_{callback.from_user.id}",
            provider_token=config.PAYMENT_TOKEN,
            currency='UAH',
            prices=prices,
            start_parameter='create_invoice',
            need_shipping_address=False,
            is_flexible=False
        )
    except TelegramBadRequest as e:
        msg = await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É: {e.message}")
        user_messages[user_id].append(msg.message_id)

@router.pre_checkout_query()
async def checkout(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.content_type == "successful_payment")
async def successful_payment(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    await delete_previous_messages(user_id, chat_id, message.bot)
    
    order = await rq.get_order(user_id)
    await message.answer(
        f'‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!</b>\nüì¶ –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <code>{order.code}</code>\n'
        f'üöö –ó–∞–±–µ—Ä—ñ—Ç—å: {order.date.split("_")[0]}, {order.date.split("_")[1]} –∑–º—ñ–Ω–∞, {order.date.split("_")[2]} –ø–µ—Ä–µ—Ä–≤–∞',
        parse_mode='HTML',
        reply_markup=kb.main
    )
    
    today = datetime.now().strftime("%d.%m.%Y")
    if order.date.split("_")[0] == today:
        await rq.change_order_pay(order.id)
        catalog_items = order.catalog.split('_')
        for i in range(0, len(catalog_items), 2):
            if i + 1 < len(catalog_items):
                item_name = catalog_items[i]
                item_count = catalog_items[i+1]
                await rq.change_count_product(item_name, item_count, order.lyceum)

@router.message(F.text == '–Ü–Ω—à–µ')
async def dodatok(message: Message):
    doc1 = FSInputFile(os.path.join("docs", "–ü–£–ë–õ–Ü–ß–ù–ò–ô_–î–û–ì–û–í–Ü–†_–û–§–ï–†–¢–ê_–ù–ê_–ü–†–û–î–ê–ñ_–•–ê–†–ß–û–í–ò–•_–ü–†–û–î–£–ö–¢–Ü–í.pdf"))
    doc2 = FSInputFile(os.path.join("docs", "–ü–û–õ–Ü–¢–ò–ö–ê_–ö–û–ù–§–Ü–ù–î–ï–ù–¶–Ü–ô–ù–û–°–¢–Ü.pdf"))
    doc3 = FSInputFile(os.path.join("docs", "–ö–û–ù–¢–ê–ö–¢–ù–ê_–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø.pdf"))
    
    await message.answer_document(doc1)
    await message.answer_document(doc2)
    await message.answer_document(doc3)

#admin com

@router.message(Command('admin'))
async def admin_panel(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    if user:
        await message.answer('–í—ñ—Ç–∞—é, –æ–±–µ—Ä—ñ—Ç—å –ª—ñ—Ü–µ–π —É —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ—Ç–∏–Ω–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∞–±–æ –≤–∏–¥–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!', reply_markup=await kb.admin_lyceums())
    
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫—â–æ –≤–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —É –≤–∞—Å –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —ñ–Ω—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')

@router.callback_query(F.data.startswith('admin_lyceum_'))
async def admin_menu(callback: CallbackQuery):
    await rq.set_lyceum(callback.from_user.id, callback.data.split("_")[2])
    await callback.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ü–µ–π!')
    await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –≤ –º–µ–Ω—é!', reply_markup= kb.admin)

@router.message(F.text == '–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def active_order_1(message: Message):
    user = await rq.check_admin(message.from_user.id)
    if user:
        user = await rq.get_user(message.from_user.id)
        await message.answer(f'–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –í–∞—Ä–∞—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ{user.lyceum} –Ω–∏–∂—á–µ!', reply_markup= await kb.all_order(user.lyceum))
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ!')

@router.callback_query(F.data.startswith('back_to_order_num'))
async def active_order_2(callback: CallbackQuery):
    
    await callback.message.delete()
    callback.answer('')
    
    user = await rq.check_admin(callback.from_user.id)
    
    if user:
        user = await rq.get_user(callback.from_user.id)
        await callback.message.answer(f'–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –í–∞—Ä–∞—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ{user.lyceum} –Ω–∏–∂—á–µ!', reply_markup= await kb.all_order(user.lyceum))
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ!')
    

@router.callback_query(F.data.startswith('order_num_'))
async def take_order(callback: CallbackQuery):
    order = await rq.get_order_by_code(callback.data.split("_")[2])
    
    await callback.message.delete()
    
    await callback.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.code}!')
    
    info = order.catalog.split('_')
    message = ''
    while info:
        item_name = info.pop(0)
        item_count = info.pop(0)
        message += f'{item_name}: {item_count} —à—Ç.\n'
    
    await callback.message.answer(f'''–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.code}\n\n{message}\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–±–µ—Ä—É—Ç—å: {order.date.split("_")[0]}, {order.date.split("_")[1]} –∑–º—ñ–Ω–∞, {order.date.split("_")[2]} –ø–µ—Ä–µ—Ä–≤–∞!''', 
                                  reply_markup= await kb.order_take(order.code))
    
@router.callback_query(F.data.startswith('order_take_'))
async def order_taken(callback: CallbackQuery):
    order = await rq.get_order_by_code(callback.data.split("_")[2])
    
    user = await rq.get_user(callback.from_user.id)
    
    await callback.message.delete()
    
    await callback.answer(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.code} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–Ω–æ!')
    await callback.message.answer(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.code} –≤–∏–¥–∞–Ω–æ!')
    
    await rq.change_actual(order.id)
    
    await callback.message.answer(f'–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –í–∞—Ä–∞—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ{user.lyceum} –Ω–∏–∂—á–µ!', reply_markup= await kb.all_order(user.lyceum))
    

@router.message(F.text == '–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å')
async def set_new_count_category(message: Message):
    user = await rq.check_admin(message.from_user.id)
    
    if user:
        await message.answer('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –¥–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É', 
                             reply_markup=await kb.admin_categories())
    
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ!')
        
@router.callback_query(F.data.startswith('admin_to_main_'))
async def admin_to_main(callback:CallbackQuery):
    user = await rq.check_admin(callback.from_user.id)
    
    await callback.message.delete()
    
    callback.answer(' ')
    
    if user:
        await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –¥–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É', 
                             reply_markup=await kb.admin_categories())
    
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ!')

    
@router.callback_query(F.data.startswith('admin_category_'))
async def set_new_count_items(callback: CallbackQuery):
    await callback.message.delete()
    
    await callback.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é!')
    await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –Ω–∞ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É', 
                                  reply_markup=await kb.admin_items(callback.data.split("_")[2], callback.from_user.id,))
    
@router.callback_query(F.data.startswith('admin_items_'))
async def set_new_count_item(callback: CallbackQuery, state:FSMContext):
    
    item = await rq.get_item(callback.data.split("_")[2])
    
    await callback.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä!')
    await callback.message.answer(f'–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É {(item.name).lower()}')
    
    await state.update_data(item_id = item.id)
    await state.set_state(ChangeStates.count)

@router.message(ChangeStates.count)
async def change_count(message: Message, state:FSMContext):
    
    await message.delete()
    
    await state.update_data(count = int(message.text))    
    
    data = await state.get_data()
    
    await rq.change_count(data['item_id'], data['count'])
    
    item = await rq.get_item(data['item_id'])
    
    await message.answer(f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É {(item.name).lower()} –Ω–∞ {item.count} —à—Ç.')
    
    await state.clear()

@router.message(Command('set_admin'))
async def set_admin(message: Message, state:FSMContext):
    user = await rq.get_user(message.from_user.id)
    if user:
        await message.answer('''–í–≤–µ–¥—ñ—Ç—å telegram id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n<i>–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å telegram id, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –±–æ—Ç @username_to_id_bot -> User -> –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á -> User id</i>''',
                             parse_mode='HTML')
        await state.set_state(AdminStates.waiting_for_admin_id.state)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫—â–æ –≤–æ–Ω–∏ —É –≤–∞—Å –º–∞—é—Ç—å –±—É—Ç–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —ñ–Ω—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')

@router.message(AdminStates.waiting_for_admin_id)
async def set_admin_id(message: Message, state:FSMContext):
    try:
        new_admin_id = int(message.text)
        if len(message.text) < 9:
            await message.answer('–í–≤–µ–¥–µ–Ω–∏–π ID –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.')
            return

        await rq.set_admin(new_admin_id)
        await message.answer(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {new_admin_id} —É—Å–ø—ñ—à–Ω–æ –∑—Ä–æ–±–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
    
    except ValueError:
        
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID.')
    
    await state.clear()